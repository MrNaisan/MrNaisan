#include <iostream>
#include <vector>
#include <fstream>
#include <string>
using namespace std;
vector<vector<int>> graph;
vector<int> used, path;
int flag, n, m, k, j;

// поиск в глубину для каждой вершины
void dfs(int v) {
    used[v] = 1; // посещаем вершину 
    k++;
    path.push_back(v); // добавляем ее в порядок обхода графа
    for (int i = 0; i < graph[v].size(); i++) {
        int to = graph[v][i];// следующая вершина графа
        if (used[to] == 1) { // если мы ее посетили, но не вышли из нее, значит мы нашли цикл
            k++;
            path.push_back(to); // добавляем следующую вершину в порядок обхода графа
            flag = 1; // ставим индикатор, что мы нашли цикл
            if (j <= 2) flag = 0;
            if (flag == 1) { // если цикл найден
                int i = path.size() - 2; // последняя вершина цикла   
                int to = path.back(); // вершина в которой зациклились 
                while (path[i] != to) { // получаем индекс вершины в которой зациклились
                    i--;
                }                
                k = 0;
                while (i < path.size() - 1) { // выводим сам цикл                    
                    i++;
                    k++;
                }               
                if (k <= j) j = k;                              
                path.pop_back();
            }
        }
        else {
            dfs(to); // если не посетили, то посещаем 
        }
    }
    used[v] = 2; // если не нашли цикл, то выходим из вершины 
    path.pop_back();    
}

// проверяем вершины на наличие цикла 
void checkNodes() {   
    for (int i = 1; i <= n; i++) {
        if (used[i] == 0) { // если не посещали вершину, то посещаем ее 
            dfs(i);                        
        }       
    } 
}


int main() {
    fstream clear_file("output.txt", ios::out); /// вот тут я очищаю файл "output.txt", если вдруг там что-то есть
    for (int i = 1; i <= 5; i++)
    {        
        j = 100;
        string number = to_string(i); /// тут номер теста перевожу из int в string
        ifstream fin("graph" + number + ".txt"); /// тут делаю поток ввода из файла под номером "number"
        ofstream fout("output.txt", ios::app); /// вывод в файл "output.txt", при этом не обновляя информаию в файле, а только добавляя
        fout << "Test #" << i << " answer:";
        int v1, v2, o = 0, l = 0;                
        fin >> n;       
        fin >> m; // считываем количество вершин и ребер 
        graph.clear();
        graph.resize(n + 1);
        used.clear();
        used.resize(n + 1, 0);
        for (int i = 0; i < m; i++) {          
            fin >> v1;
            fin >> o;
            for (int i = 1; i <= o; i++) {
                fin >> v2;                
                for (int i = 1; i <= o; i++) {
                    graph[v1].push_back(v2);
                }
            }
            o--;
            m = m - o;
        }
        checkNodes();  // проверяем вершины на наличие цикла
        if (flag == 1) 
            fout << " Girth: " << j << endl;
        else fout << "No" << endl;
        flag = 0;
        cout << "Test " << i << ":Completed"<<endl;
    }  
}
